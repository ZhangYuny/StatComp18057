devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
n <- 1000; r <- 4; beta <- 2
lambda <- rgamma(n, r, beta)
y <- rexp(n, lambda)
hist(y,freq=F,main="Histogram of mixture")
y <- seq(1, 20, 0.01)
sp=spline(y,y^2/(sqrt(2*pi))*exp(-y^2/2),n=1000)
sp1=spline(y,(sqrt(2*pi))*exp(-y^2/2),n=1000)
sp2=spline(y,(1/(2*sqrt(2)))*(2/(2+y^2))^{3/2},n=1000)# t-distribution df=2
sp3=spline(y,(2/(sqrt(2)*pi))*(3/(3+y^2))^{2},n=1000)#t-distribution df=3
sp4=spline(y,(3/8)*(4/(4+y^2))^{5/2},n=1000)#t-distribution df=4
plot(sp,type="l",col="red",lwd=2)
lines(sp1,type="l",col="green",lwd=2)
lines(sp2,type="l",col="yellow",lwd=2)
lines(sp3,type="l",col="blue",lwd=2)
lines(sp4,type="l",col="black",lwd=2)
legend("topright",legend=c("g(x)","f1(x)","f2(x)-df=2","f2(x)-df=3","f2(x)-df=4"),col=c("red","green","blue","black"),lwd=2,lty=c(1,1,1,1))
qqplot(y,rbeta(n,3,2),xlab='Accpetance-rejection',ylab='rbeta')
abline(0,1,col='blue',lwd=2)
set.seed(123)
n <- 1000;j<-k<-0;y <- numeric(n)
while (k < n) {
u <- runif(1)
j <- j + 1
x <- runif(1) #random variate from g
if (4*x^2*(1-x) > u) {
#we accept x
k <- k + 1
y[k] <- x
}
}
j    # #(experiments) for n random numbers
n <- 1000; r <- 4; beta <- 2
lambda <- rgamma(n, r, beta)
y <- rexp(n, lambda)
hist(y,freq=F,main="Histogram of mixture")
y <- seq(1, 20, 0.01)
sp=spline(y,y^2/(sqrt(2*pi))*exp(-y^2/2),n=1000)
sp1=spline(y,(sqrt(2*pi))*exp(-y^2/2),n=1000)
sp2=spline(y,(1/(2*sqrt(2)))*(2/(2+y^2))^{3/2},n=1000)# t-distribution df=2
sp3=spline(y,(2/(sqrt(2)*pi))*(3/(3+y^2))^{2},n=1000)#t-distribution df=3
sp4=spline(y,(3/8)*(4/(4+y^2))^{5/2},n=1000)#t-distribution df=4
plot(sp,type="l",col="red",lwd=2)
lines(sp1,type="l",col="green",lwd=2)
lines(sp2,type="l",col="yellow",lwd=2)
lines(sp3,type="l",col="blue",lwd=2)
lines(sp4,type="l",col="black",lwd=2)
legend("topright",legend=c("g(x)","f1(x)","f2(x)-df=2","f2(x)-df=3","f2(x)-df=4"),col=c("red","green","blue","black"),lwd=2,lty=c(1,1,1,1))
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
data("InsectSprays")
aov.spray <- aov(sqrt(count) ~ spray, data = InsectSprays)
aov.spray
summary(aov.spray)
par(mfcol = c(2, 2))
plot(aov.spray)
termplot(aov.spray, se=TRUE, rug=TRUE)
#A function is defined to calculate the Cramer-von Mises statistics of two sample univariate data.
W2<-function(x,y,n,m){
n <- length(x)
m <- length(y)
Fn<-ecdf(x)
Gm<-ecdf(y)
t<-(m*n/(m+n)^2)*(sum((Fn(x)-Gm(x))^2)+sum((Fn(y)-Gm(y))^2))
return(t)
}
#Retrieving raw data
attach(chickwts)  #data
x <- sort(as.vector(weight[feed == "soybean"]))
y <- sort(as.vector(weight[feed == "linseed"]))
detach(chickwts)
#Setting function parameters
R <- 999     #number of replicates
z <- c(x, y) #pooled sample
K <- 1:26    #sizes of  pooled sampl
W <- numeric(R) #storage for replicates
W20<-W2(x,y) # Cramer-von Mises statistics calculated from original samples
for (i in 1:R) {
##generate indices k for the first sample
k <- sample(K, size = 14, replace = FALSE)
x1 <- z[k]
y1 <- z[-k] #complement of x1
W[i] <- W2(x1,y1)
} # Cramer-von Mises statistics calculated from permutation samples
p <- mean(c(W20, W) >= W20) #p-vaule
print(p)
devtools::install_github("zhaoynan/StatComp18038")
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
git init
library(devtools)
use_package("RANN")
library(StatComp18057)
devtools::build_vignettes()
devtools::build_vignettes()
install.packages("devtools")
devtools::install_github("ZhangYuny/StatComp18057")
devtools::install_github("zhaoynan/StatComp18038")
library(StatComp18057)
?Tn
library(RANN)
x <- matrix(rnorm(100*2,0,1),ncol=2);
y <- cbind(rnorm(50),rnorm(50,0,2))
z <- rbind(x,y)
ix<-1:150
k=5
sizes<-c(100,50)
t3<-Tn(z,ix,sizes,k)
print(t3)
?cvm.stat
x <- rnorm(50)
y <- runif(30)
# Do x and y come from the same distribution?
cvm.stat(x, y)
# test if x is stochastically larger than x2
x2 <- rnorm(50, -1)
plot(ecdf(x), xlim = range(c(x, x2)))
plot(ecdf(x2), add = TRUE, lty = "dashed")
cvm.stat(x, x2)
?corr
x <- replicate(5, runif(10), simplify = FALSE)
y <- replicate(5, rnorm(10), simplify = FALSE)
corr(x,y)
??StatComp18057
??RANN
x <- replicate(5, runif(10), simplify = FALSE)
y <- replicate(5, rnorm(10), simplify = FALSE)
corr(x,y)
library(StatComp18057)
x <- replicate(5, runif(10), simplify = FALSE)
y <- replicate(5, rnorm(10), simplify = FALSE)
corr(x,y
)
x <- rnorm(50)
y <- runif(30)
# Do x and y come from the same distribution?
cvm.stat(x, y)
# test if x is stochastically larger than x2
x2 <- rnorm(50, -1)
plot(ecdf(x), xlim = range(c(x, x2)))
plot(ecdf(x2), add = TRUE, lty = "dashed")
cvm.stat(x, x2)
library(RANN)
x <- matrix(rnorm(100*2,0,1),ncol=2);
y <- cbind(rnorm(50),rnorm(50,0,2))
z <- rbind(x,y)
ix<-1:150
k=5
sizes<-c(100,50)
t3<-Tn(z,ix,sizes,k)
print(t3)
devtools::install_github("peachandbeach/StatComp18069")
library("StatComp18057", lib.loc="C:/Program Files/R/R-3.5.1/library")
library(devtools)
use_package("microbenchmark")
use_package("rmarkdown")
use_package("MASS")
use_package("evir")
use_package("boot")
use_package("DAAG")
use_package("survival")
use_package("energy")
use_package("Ball")
use_package("bootstrap")
use_package("stats")
use_package("knitr")
